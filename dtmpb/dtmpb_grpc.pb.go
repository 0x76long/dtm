// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package dtmpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DtmClient is the client API for Dtm service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DtmClient interface {
	Call(ctx context.Context, in *DtmRequest, opts ...grpc.CallOption) (*DtmReply, error)
}

type dtmClient struct {
	cc grpc.ClientConnInterface
}

func NewDtmClient(cc grpc.ClientConnInterface) DtmClient {
	return &dtmClient{cc}
}

func (c *dtmClient) Call(ctx context.Context, in *DtmRequest, opts ...grpc.CallOption) (*DtmReply, error) {
	out := new(DtmReply)
	err := c.cc.Invoke(ctx, "/dtmcli.Dtm/Call", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DtmServer is the server API for Dtm service.
// All implementations must embed UnimplementedDtmServer
// for forward compatibility
type DtmServer interface {
	Call(context.Context, *DtmRequest) (*DtmReply, error)
	mustEmbedUnimplementedDtmServer()
}

// UnimplementedDtmServer must be embedded to have forward compatible implementations.
type UnimplementedDtmServer struct {
}

func (UnimplementedDtmServer) Call(context.Context, *DtmRequest) (*DtmReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Call not implemented")
}
func (UnimplementedDtmServer) mustEmbedUnimplementedDtmServer() {}

// UnsafeDtmServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DtmServer will
// result in compilation errors.
type UnsafeDtmServer interface {
	mustEmbedUnimplementedDtmServer()
}

func RegisterDtmServer(s grpc.ServiceRegistrar, srv DtmServer) {
	s.RegisterService(&Dtm_ServiceDesc, srv)
}

func _Dtm_Call_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DtmRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DtmServer).Call(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dtmcli.Dtm/Call",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DtmServer).Call(ctx, req.(*DtmRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Dtm_ServiceDesc is the grpc.ServiceDesc for Dtm service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Dtm_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "dtmcli.Dtm",
	HandlerType: (*DtmServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Call",
			Handler:    _Dtm_Call_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dtmpb/dtmpb.proto",
}
